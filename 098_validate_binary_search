/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 with constructor arguments:
 class TreeNode {
    constructor(val, left, right) {
        this.val = val
        this.left = left
        this.right = right
    }
 }
 let node = new TreeNode(2)
 root = 2
 validate(Node(2), null, null) - true && true => true
                left- validate(Node(1), null, 2) - true && true => true
                          left - validate(null, null, 1) -> true
                          right - validate(null, 1, 2) - true
                right - validate(Node(3), 2, null) => true && true => true
                            left - validate(null, 2, 3) => true
                            right - validate(null, 3, null)  => true
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isValidBST = function(root) {
    return validate(root, null, null)
};
var validate = function(node, low, high) { // (3, low-5, high-4)
    if (node === null) { // null or undefined based on definition of TreeNode
        return true;
    }
    if (low !== null && node.val <= low) {
        return false;
    }
    if (high !== null && node.val >= high) {
        return false;
    }
    return validate(node.left, low, node.val) && validate(node.right, node.val, high)
}


// class isValidBST {
//     constructor(val, left, right){
//         this.val = val;
//         this.left = left;
//         this.right = right;
//     }
// }


// var isValidBST = function(root) {
//     return validate(root, null, null)
// };
// var validate = function(node, low, high) { // (3, low-5, high-4)
//     if (node === null) { // null or undefined based on definition of TreeNode
//         return true;
//     }
//     if (low !== null && node.val <= low) {
//         return false;
//     }
//     if (high !== null && node.val >= high) {
//         return false;
//     }
//     return validate(node.left, low, node.val) && validate(node.right, node.val, high)
// }
