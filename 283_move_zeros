// Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

// Example:

// Input: [0,1,0,3,12]
// Output: [1,3,12,0,0]
// Note:

// You must do this in-place without making a copy of the array.
// Minimize the total number of operations.

/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify nums in-place instead.
 */

//array of nums
//move all 0's to the end of it 
//you must do this in place without making a copy of the array
//least amount of operations 


// var moveZeroes = function(nums) {
  
//     for(let i= nums.length-1; i>=0; i--){
//             if(nums[i]===0){
//                 nums.push(0) 
//                 nums.splice(i,1)
//             }
//         }
//         return nums
//     };

var moveZeroes = function(nums) {
    let i = 0; // starting pointer
    let times = nums.length // total times we do the check
    while (times > 0) { // while we have some times left
        if (nums[i] === 0) { // if the value is 0, we remove it
            nums.splice(i, 1);
            nums.push(0) // after remove, we push a 0 to the end, the index does not change
        } else { 
          i += 1;   // if current value not 0, we increment the pointer by 1
        }
        times -= 1 // does not matter we found 0 or not, we need to decrement the total times.
    }
    return nums
};