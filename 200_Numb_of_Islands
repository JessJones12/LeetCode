**
 * @param {character[][]} grid
 * @return {number}
 */

//1 = land
//0 = water 
//return # of islands 
//are there any edge cases?
//DFS -->recrusion 

//BFS 

 // 1 1 1 1 
 // 1 0 0 1
 // 1 0 1 0
 // 0 0 1 1
// i helps us iterate through each indiviual array
//j  helps us iterate through each element in the array 


// i,j
//(0,0)
//traverse through 
// 2 loops 
// visit cells 
// num of islands available an mark it as 0
// as soon as we see one we will mark it as 1
// move right and mark it as 2
// wont make certain calls becuase its out of bounds 
// right m
// 0-> water
// 1-> land
// 2-> visited land

//if a 1 we are going to recrusively check to see if any of it's siblings are 1s. stop once we run out of runs that are siblings 
//nested four loops (need i and J )

// var numIslands = function(grid) {
//     if(grid === null || grid.length === 0) { //if null or empty r0
//         return 0  
//     }
    
//     let numberOfIslands = 0; //keep track of each islands 
    
//     for (let i = 0; i < grid.length; i++){ // gives access to inner 
//         for(j = 0;j < grid[i].length; j++ ) // element within array
//             if(grid[i][j] === "1") {
//                 numberOfIslands += getIslandCount(grid, i, j)
//             }
//     }
// };

// let getIslandCount = function(grid, i, j){
//     if(i < 0 || i >= grid.length || j < 0 || j >= grid[i].length || grid[i][j] === '0') {
//         return 1;
//     }
//     grid[i][j] = '0';
//     getIslandCount(grid,  i+1, j);
//      getIslandCount(grid, i-1, j);
//      getIslandCount(grid, i+1, j);
//      getIslandCount(grid, i, j+1);
//      getIslandCount(grid, i, j-1);
//     return 1;
// }

let numIslands = function(grid) {
    if (grid === null || grid.length === 0) {
        return 0;
    }
    
    let numberOfIslands = 0;
    
    for (let i = 0; i < grid.length; i++) {
        for (let j = 0; j < grid[i].length; j++) {
            console.log('search island', i, j)
            if (grid[i][j] === '1') {
            
                numberOfIslands +=1
                markSeen(grid, i , j) // [0,0]
            }
        }
    }
    
    return numberOfIslands;
};

let markSeen = function(grid, i, j) {  //out of bounds
    console.log("markSeen", i, j)
    if (i < 0 || i >= grid.length || j < 0 || j >= grid[i].length || grid[i][j] === '0') {
        return;
    }
    
    grid[i][j] = '0';
    console.log("mark 0 at", i, j)
    for (row in grid) {
        console.log(grid[row])
    }

    markSeen(grid, i + 1, j);
    markSeen(grid, i - 1, j);
    markSeen(grid, i, j + 1);
    markSeen(grid, i, j - 1);
};

/*
numIslands:
i j
0 0
0 1

markSeen(0,0)
    markSeen(1,0)
        markSeen(2,0)
            
    

            ..

[
  ["0","0","0","0","0"],
  ["0","0","0","0","0"],
  ["0","0","0","0","0"],
  ["0","0","0","0","0"]
]
*/